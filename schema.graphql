"""
 A keystone list
"""
type Post {
  id: ID!
  title: String
  slug: String
  status: String
  publishedDate: String
  author: User
  intro: Post_intro_DocumentField
  content: Post_content_DocumentField
}

type Post_intro_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type Post_content_DocumentField {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  title: String
  title_not: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  title_i: String
  title_not_i: String
  title_contains_i: String
  title_not_contains_i: String
  title_starts_with_i: String
  title_not_starts_with_i: String
  title_ends_with_i: String
  title_not_ends_with_i: String
  title_in: [String]
  title_not_in: [String]
  slug: String
  slug_not: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  slug_i: String
  slug_not_i: String
  slug_contains_i: String
  slug_not_contains_i: String
  slug_starts_with_i: String
  slug_not_starts_with_i: String
  slug_ends_with_i: String
  slug_not_ends_with_i: String
  slug_in: [String]
  slug_not_in: [String]
  status: String
  status_not: String
  status_in: [String]
  status_not_in: [String]
  publishedDate: String
  publishedDate_not: String
  publishedDate_lt: String
  publishedDate_lte: String
  publishedDate_gt: String
  publishedDate_gte: String
  publishedDate_in: [String]
  publishedDate_not_in: [String]
  author: UserWhereInput
  author_is_null: Boolean
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

enum SortPostsBy {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  slug_ASC
  slug_DESC
  status_ASC
  status_DESC
  publishedDate_ASC
  publishedDate_DESC
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  publishedDate: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input PostUpdateInput {
  title: String
  slug: String
  status: String
  publishedDate: String
  author: UserRelateToOneInput
  intro: JSON
  content: JSON
}

input UserRelateToOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  disconnectAll: Boolean
}

input PostsUpdateInput {
  id: ID!
  data: PostUpdateInput
}

input PostCreateInput {
  title: String
  slug: String
  status: String
  publishedDate: String
  author: UserRelateToOneInput
  intro: JSON
  content: JSON
}

input PostsCreateInput {
  data: PostCreateInput
}

"""
 A keystone list
"""
type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: Role
  authoredPosts(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]
  _authoredPostsMeta(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use authoredPostsCount instead."
    )
  authoredPostsCount(where: PostWhereInput! = {}): Int
  pollAnswers(
    where: PollAnswerWhereInput! = {}
    search: String
    sortBy: [SortPollAnswersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PollAnswerOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [PollAnswer!]
  _pollAnswersMeta(
    where: PollAnswerWhereInput! = {}
    search: String
    sortBy: [SortPollAnswersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PollAnswerOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use pollAnswersCount instead."
    )
  pollAnswersCount(where: PollAnswerWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

type _QueryMeta {
  count: Int
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  email: String
  email_not: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  email_i: String
  email_not_i: String
  email_contains_i: String
  email_not_contains_i: String
  email_starts_with_i: String
  email_not_starts_with_i: String
  email_ends_with_i: String
  email_not_ends_with_i: String
  email_in: [String]
  email_not_in: [String]
  password_is_set: Boolean
  role: RoleWhereInput
  role_is_null: Boolean

  """
   condition must be true for all nodes
  """
  authoredPosts_every: PostWhereInput

  """
   condition must be true for at least 1 node
  """
  authoredPosts_some: PostWhereInput

  """
   condition must be false for all nodes
  """
  authoredPosts_none: PostWhereInput

  """
   condition must be true for all nodes
  """
  pollAnswers_every: PollAnswerWhereInput

  """
   condition must be true for at least 1 node
  """
  pollAnswers_some: PollAnswerWhereInput

  """
   condition must be false for all nodes
  """
  pollAnswers_none: PollAnswerWhereInput
}

input UserWhereUniqueInput {
  id: ID
}

enum SortUsersBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneInput
  authoredPosts: PostRelateToManyInput
  pollAnswers: PollAnswerRelateToManyInput
}

input RoleRelateToOneInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: RoleWhereUniqueInput
  disconnectAll: Boolean
}

input PostRelateToManyInput {
  create: [PostCreateInput]
  connect: [PostWhereUniqueInput]
  disconnect: [PostWhereUniqueInput]
  disconnectAll: Boolean
}

input PollAnswerRelateToManyInput {
  create: [PollAnswerCreateInput]
  connect: [PollAnswerWhereUniqueInput]
  disconnect: [PollAnswerWhereUniqueInput]
  disconnectAll: Boolean
}

input UsersUpdateInput {
  id: ID!
  data: UserUpdateInput
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: RoleRelateToOneInput
  authoredPosts: PostRelateToManyInput
  pollAnswers: PollAnswerRelateToManyInput
}

input UsersCreateInput {
  data: UserCreateInput
}

"""
 A keystone list
"""
type Role {
  id: ID!
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]
  _usersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  name_i: String
  name_not_i: String
  name_contains_i: String
  name_not_contains_i: String
  name_starts_with_i: String
  name_not_starts_with_i: String
  name_ends_with_i: String
  name_not_ends_with_i: String
  name_in: [String]
  name_not_in: [String]
  canManageContent: Boolean
  canManageContent_not: Boolean
  canManageUsers: Boolean
  canManageUsers_not: Boolean

  """
   condition must be true for all nodes
  """
  users_every: UserWhereInput

  """
   condition must be true for at least 1 node
  """
  users_some: UserWhereInput

  """
   condition must be false for all nodes
  """
  users_none: UserWhereInput
}

input RoleWhereUniqueInput {
  id: ID
}

enum SortRolesBy {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  canManageContent_ASC
  canManageContent_DESC
  canManageUsers_ASC
  canManageUsers_DESC
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canManageContent: OrderDirection
  canManageUsers: OrderDirection
}

input RoleUpdateInput {
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users: UserRelateToManyInput
}

input UserRelateToManyInput {
  create: [UserCreateInput]
  connect: [UserWhereUniqueInput]
  disconnect: [UserWhereUniqueInput]
  disconnectAll: Boolean
}

input RolesUpdateInput {
  id: ID!
  data: RoleUpdateInput
}

input RoleCreateInput {
  name: String
  canManageContent: Boolean
  canManageUsers: Boolean
  users: UserRelateToManyInput
}

input RolesCreateInput {
  data: RoleCreateInput
}

"""
 A keystone list
"""
type Poll {
  id: ID!
  label: String
  answers(
    where: PollAnswerWhereInput! = {}
    search: String
    sortBy: [SortPollAnswersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PollAnswerOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [PollAnswer!]
  _answersMeta(
    where: PollAnswerWhereInput! = {}
    search: String
    sortBy: [SortPollAnswersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PollAnswerOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use answersCount instead."
    )
  answersCount(where: PollAnswerWhereInput! = {}): Int
  responsesCount: Int
  userAnswer: PollAnswer
}

input PollWhereInput {
  AND: [PollWhereInput!]
  OR: [PollWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  label: String
  label_not: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  label_i: String
  label_not_i: String
  label_contains_i: String
  label_not_contains_i: String
  label_starts_with_i: String
  label_not_starts_with_i: String
  label_ends_with_i: String
  label_not_ends_with_i: String
  label_in: [String]
  label_not_in: [String]

  """
   condition must be true for all nodes
  """
  answers_every: PollAnswerWhereInput

  """
   condition must be true for at least 1 node
  """
  answers_some: PollAnswerWhereInput

  """
   condition must be false for all nodes
  """
  answers_none: PollAnswerWhereInput
}

input PollWhereUniqueInput {
  id: ID
}

enum SortPollsBy {
  id_ASC
  id_DESC
  label_ASC
  label_DESC
}

input PollOrderByInput {
  id: OrderDirection
  label: OrderDirection
}

input PollUpdateInput {
  label: String
  answers: PollAnswerRelateToManyInput
}

input PollsUpdateInput {
  id: ID!
  data: PollUpdateInput
}

input PollCreateInput {
  label: String
  answers: PollAnswerRelateToManyInput
}

input PollsCreateInput {
  data: PollCreateInput
}

"""
 A keystone list
"""
type PollAnswer {
  id: ID!
  label: String
  poll: Poll
  answeredByUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]
  _answeredByUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use answeredByUsersCount instead."
    )
  answeredByUsersCount(where: UserWhereInput! = {}): Int
  voteCount: Int
}

input PollAnswerWhereInput {
  AND: [PollAnswerWhereInput!]
  OR: [PollAnswerWhereInput!]
  id: ID
  id_not: ID
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  label: String
  label_not: String
  label_contains: String
  label_not_contains: String
  label_starts_with: String
  label_not_starts_with: String
  label_ends_with: String
  label_not_ends_with: String
  label_i: String
  label_not_i: String
  label_contains_i: String
  label_not_contains_i: String
  label_starts_with_i: String
  label_not_starts_with_i: String
  label_ends_with_i: String
  label_not_ends_with_i: String
  label_in: [String]
  label_not_in: [String]
  poll: PollWhereInput
  poll_is_null: Boolean

  """
   condition must be true for all nodes
  """
  answeredByUsers_every: UserWhereInput

  """
   condition must be true for at least 1 node
  """
  answeredByUsers_some: UserWhereInput

  """
   condition must be false for all nodes
  """
  answeredByUsers_none: UserWhereInput
}

input PollAnswerWhereUniqueInput {
  id: ID
}

enum SortPollAnswersBy {
  id_ASC
  id_DESC
  label_ASC
  label_DESC
}

input PollAnswerOrderByInput {
  id: OrderDirection
  label: OrderDirection
}

input PollAnswerUpdateInput {
  label: String
  poll: PollRelateToOneInput
  answeredByUsers: UserRelateToManyInput
}

input PollRelateToOneInput {
  create: PollCreateInput
  connect: PollWhereUniqueInput
  disconnect: PollWhereUniqueInput
  disconnectAll: Boolean
}

input PollAnswersUpdateInput {
  id: ID!
  data: PollAnswerUpdateInput
}

input PollAnswerCreateInput {
  label: String
  poll: PollRelateToOneInput
  answeredByUsers: UserRelateToManyInput
}

input PollAnswersCreateInput {
  data: PollAnswerCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  """
   Create a single Post item.
  """
  createPost(data: PostCreateInput): Post

  """
   Create multiple Post items.
  """
  createPosts(data: [PostsCreateInput]): [Post]

  """
   Update a single Post item by ID.
  """
  updatePost(id: ID!, data: PostUpdateInput): Post

  """
   Update multiple Post items by ID.
  """
  updatePosts(data: [PostsUpdateInput]): [Post]

  """
   Delete a single Post item by ID.
  """
  deletePost(id: ID!): Post

  """
   Delete multiple Post items by ID.
  """
  deletePosts(ids: [ID!]): [Post]

  """
   Create a single User item.
  """
  createUser(data: UserCreateInput): User

  """
   Create multiple User items.
  """
  createUsers(data: [UsersCreateInput]): [User]

  """
   Update a single User item by ID.
  """
  updateUser(id: ID!, data: UserUpdateInput): User

  """
   Update multiple User items by ID.
  """
  updateUsers(data: [UsersUpdateInput]): [User]

  """
   Delete a single User item by ID.
  """
  deleteUser(id: ID!): User

  """
   Delete multiple User items by ID.
  """
  deleteUsers(ids: [ID!]): [User]

  """
   Create a single Role item.
  """
  createRole(data: RoleCreateInput): Role

  """
   Create multiple Role items.
  """
  createRoles(data: [RolesCreateInput]): [Role]

  """
   Update a single Role item by ID.
  """
  updateRole(id: ID!, data: RoleUpdateInput): Role

  """
   Update multiple Role items by ID.
  """
  updateRoles(data: [RolesUpdateInput]): [Role]

  """
   Delete a single Role item by ID.
  """
  deleteRole(id: ID!): Role

  """
   Delete multiple Role items by ID.
  """
  deleteRoles(ids: [ID!]): [Role]

  """
   Create a single Poll item.
  """
  createPoll(data: PollCreateInput): Poll

  """
   Create multiple Poll items.
  """
  createPolls(data: [PollsCreateInput]): [Poll]

  """
   Update a single Poll item by ID.
  """
  updatePoll(id: ID!, data: PollUpdateInput): Poll

  """
   Update multiple Poll items by ID.
  """
  updatePolls(data: [PollsUpdateInput]): [Poll]

  """
   Delete a single Poll item by ID.
  """
  deletePoll(id: ID!): Poll

  """
   Delete multiple Poll items by ID.
  """
  deletePolls(ids: [ID!]): [Poll]

  """
   Create a single PollAnswer item.
  """
  createPollAnswer(data: PollAnswerCreateInput): PollAnswer

  """
   Create multiple PollAnswer items.
  """
  createPollAnswers(data: [PollAnswersCreateInput]): [PollAnswer]

  """
   Update a single PollAnswer item by ID.
  """
  updatePollAnswer(id: ID!, data: PollAnswerUpdateInput): PollAnswer

  """
   Update multiple PollAnswer items by ID.
  """
  updatePollAnswers(data: [PollAnswersUpdateInput]): [PollAnswer]

  """
   Delete a single PollAnswer item by ID.
  """
  deletePollAnswer(id: ID!): PollAnswer

  """
   Delete multiple PollAnswer items by ID.
  """
  deletePollAnswers(ids: [ID!]): [PollAnswer]
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  endSession: Boolean!
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  code: PasswordAuthErrorCode!
  message: String!
}

enum PasswordAuthErrorCode {
  FAILURE
  IDENTITY_NOT_FOUND
  SECRET_NOT_SET
  MULTIPLE_IDENTITY_MATCHES
  SECRET_MISMATCH
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  """
   Search for all Post items which match the where clause.
  """
  allPosts(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Post!]

  """
   Search for the Post item with the matching ID.
  """
  Post(where: PostWhereUniqueInput!): Post

  """
   Perform a meta-query on all Post items which match the where clause.
  """
  _allPostsMeta(
    where: PostWhereInput! = {}
    search: String
    sortBy: [SortPostsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PostOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use postsCount instead."
    )
  postsCount(where: PostWhereInput! = {}): Int

  """
   Search for all User items which match the where clause.
  """
  allUsers(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [User!]

  """
   Search for the User item with the matching ID.
  """
  User(where: UserWhereUniqueInput!): User

  """
   Perform a meta-query on all User items which match the where clause.
  """
  _allUsersMeta(
    where: UserWhereInput! = {}
    search: String
    sortBy: [SortUsersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [UserOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use usersCount instead."
    )
  usersCount(where: UserWhereInput! = {}): Int

  """
   Search for all Role items which match the where clause.
  """
  allRoles(
    where: RoleWhereInput! = {}
    search: String
    sortBy: [SortRolesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoleOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Role!]

  """
   Search for the Role item with the matching ID.
  """
  Role(where: RoleWhereUniqueInput!): Role

  """
   Perform a meta-query on all Role items which match the where clause.
  """
  _allRolesMeta(
    where: RoleWhereInput! = {}
    search: String
    sortBy: [SortRolesBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [RoleOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use rolesCount instead."
    )
  rolesCount(where: RoleWhereInput! = {}): Int

  """
   Search for all Poll items which match the where clause.
  """
  allPolls(
    where: PollWhereInput! = {}
    search: String
    sortBy: [SortPollsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PollOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [Poll!]

  """
   Search for the Poll item with the matching ID.
  """
  Poll(where: PollWhereUniqueInput!): Poll

  """
   Perform a meta-query on all Poll items which match the where clause.
  """
  _allPollsMeta(
    where: PollWhereInput! = {}
    search: String
    sortBy: [SortPollsBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PollOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use pollsCount instead."
    )
  pollsCount(where: PollWhereInput! = {}): Int

  """
   Search for all PollAnswer items which match the where clause.
  """
  allPollAnswers(
    where: PollAnswerWhereInput! = {}
    search: String
    sortBy: [SortPollAnswersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PollAnswerOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): [PollAnswer!]

  """
   Search for the PollAnswer item with the matching ID.
  """
  PollAnswer(where: PollAnswerWhereUniqueInput!): PollAnswer

  """
   Perform a meta-query on all PollAnswer items which match the where clause.
  """
  _allPollAnswersMeta(
    where: PollAnswerWhereInput! = {}
    search: String
    sortBy: [SortPollAnswersBy!]
      @deprecated(reason: "sortBy has been deprecated in favour of orderBy")
    orderBy: [PollAnswerOrderByInput!]! = []
    first: Int
    skip: Int! = 0
  ): _QueryMeta
    @deprecated(
      reason: "This query will be removed in a future version. Please use pollAnswersCount instead."
    )
  pollAnswersCount(where: PollAnswerWhereInput! = {}): Int
  authenticatedItem: AuthenticatedItem
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID!): KeystoneAdminUIFieldMetaItemView
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode!
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
